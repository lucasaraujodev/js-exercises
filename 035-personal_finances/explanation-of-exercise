üá∫üá∏: ### Personal finances

Develop a single-page web application using html, css and javascript to control personal finances that meets the following requirements:

- your application must use the json-server library to simulate a backend that stores financial transactions.
- transactions must have at least the properties id (managed by json-server), name and value.
- the application must show all transactions saved in the backend on the page.
- the application must have a form to create a new transaction in the backend (without updating the page) through a POST request.
- new transactions created should appear in the list of all transactions as soon as they are created, all without refreshing the page.
- the application must allow editing of transaction data through a PUT request (PUT works in the same way as POST, sending data to be updated in the body and with the id of the resource to be edited in the url).
- the application must allow deleting a transaction through a DELETE request (DELETE requests do not need a body, just the id of the resource to be deleted in the url).
- the application must also show the total balance on the page, which is calculated by adding up all transaction values (which can be positive or negative).
- the total balance value must always be updated on the screen, that is, when creating, editing or deleting a transaction the balance must reflect the new value.

üáßüá∑: ### Finan√ßas Pessoais

Desenvolva uma aplica√ß√£o web de p√°gina √∫nica utilizando html, css e javascript para controle de finan√ßas pessoais que atenda aos seguintes requisitos:

- sua aplica√ß√£o dever√° utilizar a biblioteca json-server para simular um backend que armazena transa√ß√µes financeiras.
- transa√ß√µes devem possuir, pelo menos, as propriedades id (gerenciado pelo json-server), nome e valor.
- a aplica√ß√£o dever√° mostrar na p√°gina todas as transa√ß√µes salvas no backend.
- a aplica√ß√£o dever√° ter um formul√°rio para criar uma nova transa√ß√£o no backend (sem atualizar a p√°gina) atrav√©s de uma requisi√ß√£o POST.
- novas transa√ß√µes criadas devem aparecer na lista de todas as transa√ß√µes assim que s√£o criadas, tudo isso sem atualizar a p√°gina.
- a aplica√ß√£o dever√° permitir editar os dados de uma transa√ß√£o atrav√©s de uma requisi√ß√£o PUT (o PUT funciona da mesma forma que o POST, enviando dados a serem atualizados no body e com o id do recurso a ser editado na url).
- a aplica√ß√£o dever√° permitir excluir uma transa√ß√£o atrav√©s de uma requisi√ß√£o DELETE (as requisi√ß√µes DELETE n√£o precisam de um body, apenas do id do recurso a ser exclu√≠do na url).
- a aplica√ß√£o tamb√©m dever√° mostrar na p√°gina o saldo total, que √© calculado somando todos os valores das transa√ß√µes (que podem ser positivos ou negativos).
- o valor do saldo total deve estar sempre atualizado na tela, ou seja, ao criar, editar ou excluir uma transa√ß√£o o saldo dever√° refletir o novo valor.